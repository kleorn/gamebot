#pip install pyTelegramBotAPI
#@reboot cd /home/admin/web/m-kan.ru/private/gamebot && python3 bot.py
import random
import os
if os.path.exists('config_secret.py'):
	import config_secret as config
else:
	import config
import telebot
import csv

class GameServer:
	def __init__(self):
		self.selected_games = {} #—Å–ª–æ–≤–∞—Ä—å user_id: –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã
		self.games = [
			{'func': KupiSlonaGame, 'num': '1', 'name': '–ö—É–ø–∏ —Å–ª–æ–Ω–∞'},
			{'func': MulTableGame, 'num': '2', 'name': '–¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è'},
			{'func': SuperMulTableGame, 'num': '3', 'name': '–°—É–ø–µ—Ä—Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è'},
			{'func': EngDictGame, 'num': '4', 'name': 'English words'}
		]
		self.data = {}

	def list_games(self, message):
		self.selected_games[message.chat.id] = SelectGame
		games_list_str = '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:\n'
		for g in self.games:
			games_list_str += g['num'] + ' - ' + g['name'] + '\n'
		return games_list_str


class Game:
	def __init__(self):
		self.data = {}

class SelectGame(Game):
	def reply(message):
		if message.text in [game['num'] for game in srv.games]:
			game = [game for game in srv.games if game['num'] == message.text][0]
			srv.selected_games[message.chat.id] = game['func']
			return '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É \"' + game['name'] + '\"\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤—å \"!\"\n\n' + game['func'].start(message)

class EnterUrName(Game): #—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å
	@classmethod
	def reply(cls, message):
		uid = message.chat.id
		srv.data[uid] = {}
		srv.data[uid]['username'] = message.text
		return '–ê —è - –ë–µ–≥–µ–º–æ—Ç–æ–±–æ—Ç! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ' + message.text + '!\n–ß—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ "?"\n' + srv.list_games(message)
	@classmethod
	def start(cls, message):
		uid = message.chat.id
		return '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ê–Ω—é—Ç–∫–∞?üòÄüêÅ'


class KupiSlonaGame(Game): #—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å
	data = {}
	@classmethod
	def reply(cls, message):
		return '–í—Å–µ –≥–æ–≤–æ—Ä—è—Ç \"' + message.text + '\", –∞ —Ç—ã –∫—É–ø–∏ —Å–ª–æ–Ω–∞'
	@classmethod
	def start(cls, message):
		uid = message.chat.id
		cls.data[uid] = {}
		return '–£–ù–ò–ö–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!!! –ö—É–ø–∏ —Å–ª–æ–Ω–∞!'

class MulTableGame(Game):
	data = {}
	@classmethod
	def start(cls, message):
		uid = message.chat.id
		cls.data[uid] = {}
		cls.data[uid]['score'] = 0
		return cls.ask_question(message)

	@classmethod
	def reply(cls, message):
		uid = message.chat.id
		if 'question' in cls.data[uid]: #–µ—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
			if message.text == cls.data[uid]['answer']:
				cls.data[uid].pop('question')
				cls.data[uid]['score'] += int(cls.data[uid]['answer'])
				return '–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ' + srv.data[uid]['username'] + ', ' + message.text + '! \n–°—á–µ—Ç - ' + str(cls.data[uid]['score']) + ' –æ—á–∫–æ–≤\n–î–∞–≤–∞–π –µ—â—ë!\n' + cls.ask_question(message)
			else:
				return "–î–∞–≤–∞–π –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
		else:
			return cls.ask_question(cls, message)

	@classmethod
	def ask_question(cls, message):
		uid = message.chat.id
		a = random.randint(1, 10)
		b = random.randint(1, 10)
		cls.data[uid]['question'] = str(a) + ' x ' + str(b) + '?'
		cls.data[uid]['answer'] = str(a * b)

		return cls.data[uid]['question']

class SuperMulTableGame(Game):
	data = {}
	@classmethod
	def start(cls, message):
		uid = message.chat.id
		cls.data[uid] = {}
		cls.data[uid]['score'] = 0
		return cls.ask_question(message)

	@classmethod
	def reply(cls, message):
		uid = message.chat.id
		if 'question' in cls.data[uid]: #–µ—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
			if message.text == cls.data[uid]['answer']:
				cls.data[uid].pop('question')
				cls.data[uid]['score'] += int(cls.data[uid]['answer'])*100
				return '–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ' + srv.data[uid]['username'] + ', ' + message.text + '! \n–°—á–µ—Ç - ' + str(cls.data[uid]['score']) + ' –æ—á–∫–æ–≤\n–î–∞–≤–∞–π –µ—â—ë!\n' + cls.ask_question(message)
			else:
				return "–î–∞–≤–∞–π –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
		else:
			return cls.ask_question(cls, message)

	@classmethod
	def ask_question(cls, message):
		uid = message.chat.id
		a = random.randint(10, 15)
		b = random.randint(1, 15)
		cls.data[uid]['question'] = str(a) + ' x ' + str(b) + '?'
		cls.data[uid]['answer'] = str(a * b)
		return cls.data[uid]['question']

class EngDictGame(Game):
	data = {}
	common_eng_dict = {}
	filename = 'engdict.csv'
	with open(filename, encoding='utf-8') as f:
		reader = csv.reader(f, delimiter=';')
		for row in reader:
			common_eng_dict[row[0]] = row[1]

	@classmethod
	def start(cls, message):
		uid = message.chat.id
		cls.data[uid] = {}
		cls.data[uid]['score'] = 0
		cls.data[uid]['eng_dict']=cls.common_eng_dict.copy()
		return cls.ask_question(message)

	@classmethod
	def reply(cls, message):
		uid = message.chat.id
		if 'question' in cls.data[uid]: #–µ—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
			if message.text.lower().strip() == cls.data[uid]['answer']:
				cls.data[uid]['eng_dict'].pop(cls.data[uid]['question_word'])
				cls.data[uid].pop('question')
				cls.data[uid].pop('question_word')
				cls.data[uid]['score'] += 20

				reply_text = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ, ' + srv.data[uid]['username'] + ', ' + message.text + '! \n–°—á–µ—Ç - ' + str(cls.data[uid]['score']) + ' –æ—á–∫–æ–≤\n–î–∞–≤–∞–π –µ—â—ë!\n'

				if len(cls.data[uid]['eng_dict'])==0:
					cls.data[uid]['eng_dict'] = cls.common_eng_dict.copy()
					reply_text += '–ü–û–ó–î–†–ê–í–Ø–Æ! –í–°–ï –°–õ–û–í–ê –°–ù–û–í–ê –ü–û–ë–ï–ñ–î–ï–ù–´!\n'

				return reply_text + cls.ask_question(message)
			else:
				return "–î–∞–≤–∞–π –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
		else:
			return cls.ask_question(cls, message)

	@classmethod
	def ask_question(cls, message):
		uid = message.chat.id
		a = random.randint(0, len(cls.data[uid]['eng_dict']) - 1)
		dict_keys=list(cls.data[uid]['eng_dict'].keys())
		question_icons=['üá¨üáß','üö¢','üè∞','üé°']
		question_icon = question_icons[random.randint(0, len(question_icons)-1)]
		cls.data[uid]['question'] = 'What\'s English for \'' + dict_keys[a] + '\'? ' + question_icon

		cls.data[uid]['question_word'] = dict_keys[a]
		cls.data[uid]['answer'] = cls.data[uid]['eng_dict'][dict_keys[a]]

		return cls.data[uid]['question']



srv = GameServer()
bot = telebot.TeleBot(config.TOKEN)

#–∑–∞–¥–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
def repeat_all_messages(message):
	uid = message.chat.id
	if uid not in srv.selected_games or message.text == '?': #–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∏–º—è
		reply = EnterUrName.start(message)
		srv.selected_games[uid]=EnterUrName
	else:
		if message.text == '!':
			reply_func = srv.list_games
		else:
			reply_func = srv.selected_games[message.chat.id].reply
		reply = reply_func(message)

	bot.send_message(message.chat.id, reply)

bot.polling(non_stop=True) #–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π